public class DequeUsingArray {
    private int[] array;
    private int front;
    private int rear;
    private int size;
    private int capacity;

    // Constructor
    public DequeUsingArray(int capacity) {
        this.capacity = capacity;
        array = new int[capacity];
        front = 0;
        rear = capacity - 1;
        size = 0;
    }

    // Insert an element at the front of the deque
    public void addFirst(int item) {
        if (isFull()) {
            resize();
        }
        front = (front - 1 + capacity) % capacity;
        array[front] = item;
        size++;
    }

    // Insert an element at the back of the deque
    public void addLast(int item) {
        if (isFull()) {
            resize();
        }
        rear = (rear + 1) % capacity;
        array[rear] = item;
        size++;
    }

    // Remove and return the element from the front of the deque
    public int removeFirst() {
        if (isEmpty()) {
            throw new IndexOutOfBoundsException("Deque is empty");
        }
        int removedItem = array[front];
        front = (front + 1) % capacity;
        size--;
        return removedItem;
    }

    // Remove and return the element from the back of the deque
    public int removeLast() {
        if (isEmpty()) {
            throw new IndexOutOfBoundsException("Deque is empty");
        }
        int removedItem = array[rear];
        rear = (rear - 1 + capacity) % capacity;
        size--;
        return removedItem;
    }

    // Peek at the element at the front of the deque without removing it
    public int peekFirst() {
        if (isEmpty()) {
            throw new IndexOutOfBoundsException("Deque is empty");
        }
        return array[front];
    }

    // Peek at the element at the back of the deque without removing it
    public int peekLast() {
        if (isEmpty()) {
            throw new IndexOutOfBoundsException("Deque is empty");
        }
        return array[rear];
    }

    // Check if the deque is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Get the size of the deque
    public int size() {
        return size;
    }

    // Check if the deque is full
    private boolean isFull() {
        return size == capacity;
    }

    // Resize the array when it's full
    private void resize() {
        int newCapacity = capacity * 2;
        int[] newArray = new int[newCapacity];
        for (int i = 0; i < size; i++) {
            newArray[i] = array[(front + i) % capacity];
        }
        array = newArray;
        front = 0;
        rear = size - 1;
        capacity = newCapacity;
    }

    public static void main(String[] args) {
        DequeUsingArray deque = new DequeUsingArray(5);

        deque.addFirst(1);
        deque.addLast(4);
        deque.addFirst(2);
        deque.addLast(3);

        System.out.println("---------------------------------");
        System.out.println("First element: " + deque.peekFirst());
        System.out.println("Last element: " + deque.peekLast());

        System.out.println("Deque size: " + deque.size());
        System.out.println("---------------------------------");

        System.out.println("Removed first: " + deque.removeFirst());
        System.out.println("Removed last: " + deque.removeLast());
        System.out.println("---------------------------------");
        System.out.println("First element: " + deque.peekFirst());
        System.out.println("Last element: " + deque.peekLast());

        System.out.println("Deque size: " + deque.size());
        System.out.println("---------------------------------");
    }
}
