import java.util.Scanner;

// Node class for doubly linked list
class Node<T> {
    T data;
    Node<T> next;
    Node<T> prev;

    public Node(T data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

// Doubly linked list implementation
public class DoublyLinkedList<T> {
    private Node<T> head;

    // Constructor to initialize an empty list
    public DoublyLinkedList() {
        this.head = null;
    }

    // Method to add an element at the beginning
    public void addToFront(T data) {
        Node<T> newNode = new Node<>(data);
        if (head != null) {
            newNode.next = head;
            head.prev = newNode;
        }
        head = newNode;
        System.out.println("Added element: " + data);
    }

    // Method to delete the first occurrence of an element
    public boolean delete(T data) {
        if (head == null) {
            System.out.println("Element not found: " + data);
            return false;
        }
        Node<T> current = head;
        while (current != null && !current.data.equals(data)) {
            current = current.next;
        }
        if (current == null) {
            System.out.println("Element not found: " + data);
            return false;
        }
        if (current.prev != null) {
            current.prev.next = current.next;
        } else {
            head = current.next;
        }
        if (current.next != null) {
            current.next.prev = current.prev;
        }
        System.out.println("Deleted element: " + data);
        return true;
    }

    // Method to search for an element
    public boolean contains(T data) {
        Node<T> current = head;
        while (current != null) {
            if (current.data.equals(data)) {
                System.out.println("Element found: " + data);
                return true;
            }
            current = current.next;
        }
        System.out.println("Element not found: " + data);
        return false;
    }

    // Method to print the elements of the list
    public void printList() {
        if (head == null) {
            System.out.println("List is empty.");
        } else {
            Node<T> current = head;
            while (current != null) {
                System.out.print(current.data + " <-> ");
                current = current.next;
            }
            System.out.println("null");
        }
    }

    // Main method for testing the linked list
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        DoublyLinkedList<Integer> list = new DoublyLinkedList<>();

        // Adding initial elements
        list.addToFront(20);
        list.addToFront(15);
        list.addToFront(10);

        // Printing initial list
        System.out.println("Initial list:");
        list.printList();

        // Adding an element at the beginning
        System.out.print("Enter element to insert at the beginning: ");
        int addElement = scanner.nextInt();
        list.addToFront(addElement);

        // Printing list after insertion
        System.out.println("List after insertion:");
        list.printList();

        // Deleting an element
        System.out.print("Enter element to delete: ");
        int deleteElement = scanner.nextInt();
        list.delete(deleteElement);

        // Printing list after deletion
        System.out.println("List after deletion:");
        list.printList();

        // Searching for an element
        System.out.print("Enter element to search: ");
        int searchElement = scanner.nextInt();
        boolean found = list.contains(searchElement);
        System.out.println("Search result for element " + searchElement + ": " + found);

        scanner.close();
    }
}
