// Node class representing each node in the binary tree
class Node {
    int value;
    Node left, right;

    public Node(int item) {
        value = item;
        left = right = null;
    }
}

// BinaryTree class containing operations for insertion, deletion, and traversals
class BinaryTree {
    Node root;

    // Constructor
    BinaryTree() {
        root = null;
    }

    // Insertion method
    void insert(int value) {
        root = insertRec(root, value);
    }

    // Recursive method to insert a new value in the binary tree
    Node insertRec(Node root, int value) {
        if (root == null) {
            root = new Node(value);
            return root;
        }

        if (value < root.value)
            root.left = insertRec(root.left, value);
        else if (value > root.value)
            root.right = insertRec(root.right, value);

        return root;
    }

    // Deletion method
    void delete(int value) {
        root = deleteRec(root, value);
    }

    // Recursive method to delete a value in the binary tree
    Node deleteRec(Node root, int value) {
        if (root == null) return root;

        if (value < root.value)
            root.left = deleteRec(root.left, value);
        else if (value > root.value)
            root.right = deleteRec(root.right, value);
        else {
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            root.value = minValue(root.right);
            root.right = deleteRec(root.right, root.value);
        }

        return root;
    }

    // Method to find the smallest value in the right subtree
    int minValue(Node root) {
        int minVal = root.value;
        while (root.left != null) {
            minVal = root.left.value;
            root = root.left;
        }
        return minVal;
    }

    // Pre-order traversal
    void preOrderTraversal() {
        preOrderRec(root);
    }

    // Recursive method for pre-order traversal
    void preOrderRec(Node root) {
        if (root != null) {
            System.out.print(root.value + " ");
            preOrderRec(root.left);
            preOrderRec(root.right);
        }
    }

    // In-order traversal
    void inOrderTraversal() {
        inOrderRec(root);
    }

    // Recursive method for in-order traversal
    void inOrderRec(Node root) {
        if (root != null) {
            inOrderRec(root.left);
            System.out.print(root.value + " ");
            inOrderRec(root.right);
        }
    }

    // Post-order traversal
    void postOrderTraversal() {
        postOrderRec(root);
    }

    // Recursive method for post-order traversal
    void postOrderRec(Node root) {
        if (root != null) {
            postOrderRec(root.left);
            postOrderRec(root.right);
            System.out.print(root.value + " ");
        }
    }
}
public class Main {
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        // Insertion
        tree.insert(100);
        tree.insert(50);
        tree.insert(150);
        tree.insert(25);
        tree.insert(75);
        tree.insert(125);
        tree.insert(175);
        tree.insert(60);
        tree.insert(80);
        tree.insert(110);
        tree.insert(130);

        System.out.println("In-order traversal:");
        tree.inOrderTraversal();  // Expected: 25 50 60 75 80 100 110 125 130 150 175

        System.out.println("\nPre-order traversal:");
        tree.preOrderTraversal();  // Expected: 100 50 25 75 60 80 150 125 110 130 175

        System.out.println("\nPost-order traversal:");
        tree.postOrderTraversal();  // Expected: 25 60 80 75 50 110 130 125 175 150 100

        // Deletion
        tree.delete(25);
        System.out.println("\nIn-order traversal after deletion of 25:");
        tree.inOrderTraversal();  // Expected: 50 60 75 80 100 110 125 130 150 175

        tree.delete(75);
        System.out.println("\nIn-order traversal after deletion of 75:");
        tree.inOrderTraversal();  // Expected: 50 60 80 100 110 125 130 150 175

        tree.delete(100);
        System.out.println("\nIn-order traversal after deletion of 100:");
        tree.inOrderTraversal();  // Expected: 50 60 80 110 125 130 150 175
    }
}
