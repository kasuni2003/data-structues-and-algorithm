import java.util.*;

public class Dijkstra {

    // Class to represent a graph edge
    static class Edge {
        int target;
        int weight;

        public Edge(int target, int weight) {
            this.target = target;
            this.weight = weight;
        }
    }

    // Class to represent a graph
    static class Graph {
        int vertices;
        LinkedList<Edge>[] adjacencyList;

        public Graph(int vertices) {
            this.vertices = vertices;
            adjacencyList = new LinkedList[vertices];
            for (int i = 0; i < vertices; i++) {
                adjacencyList[i] = new LinkedList<>();
            }
        }

        // Add an edge to the graph
        public void addEdge(int source, int target, int weight) {
            adjacencyList[source].add(new Edge(target, weight));
            // For undirected graph, add the reverse edge as well
            // adjacencyList[target].add(new Edge(source, weight));
        }
    }

    // Function to implement Dijkstra's Algorithm
    public static void dijkstra(Graph graph, int source) {
        int vertices = graph.vertices;
        int[] distances = new int[vertices]; // Array to store the shortest distances
        boolean[] visited = new boolean[vertices]; // Array to track visited nodes

        // Initialize distances to infinity and visited to false
        Arrays.fill(distances, Integer.MAX_VALUE);
        distances[source] = 0;

        // Priority queue to store nodes based on their distances
        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.comparingInt(v -> distances[v]));
        pq.add(source);

        while (!pq.isEmpty()) {
            int current = pq.poll(); // Get the node with the smallest distance

            // If the node is already visited, skip it
            if (visited[current]) {
                continue;
            }

            visited[current] = true;

            // Relax all adjacent edges
            for (Edge edge : graph.adjacencyList[current]) {
                int target = edge.target;
                int weight = edge.weight;

                if (!visited[target] && distances[current] + weight < distances[target]) {
                    distances[target] = distances[current] + weight;
                    pq.add(target); // Add the updated node to the priority queue
                }
            }
        }

        // Print the shortest distances
        System.out.println("Shortest distances from source " + source + ":");
        for (int i = 0; i < vertices; i++) {
            System.out.println("Node " + i + ": " + distances[i]);
        }
    }

    // Main method to test the implementation
    public static void main(String[] args) {
        int vertices = 6;
        Graph graph = new Graph(vertices);

        // Add edges to the graph
        graph.addEdge(0, 1, 4);
        graph.addEdge(0, 2, 3);
        graph.addEdge(1, 2, 1);
        graph.addEdge(1, 3, 2);
        graph.addEdge(2, 3, 4);
        graph.addEdge(3, 4, 2);
        graph.addEdge(4, 5, 6);

        // Run Dijkstra's algorithm from source node 0
        dijkstra(graph, 0);
    }
}
