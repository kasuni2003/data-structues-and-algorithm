public class FloydWarshall {

    // Define a large value to represent infinity (no direct path)
    private static final int INF = 99999;

    // Function to implement Floyd-Warshall Algorithm
    public static void floydWarshall(int[][] graph, int vertices) {
        int[][] distances = new int[vertices][vertices];

        // Initialize the distance matrix with the given graph
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                distances[i][j] = graph[i][j];
            }
        }

        // Apply Floyd-Warshall Algorithm
        for (int k = 0; k < vertices; k++) {
            for (int i = 0; i < vertices; i++) {
                for (int j = 0; j < vertices; j++) {
                    // If vertex k is on the shortest path from i to j, update the distance
                    if (distances[i][k] + distances[k][j] < distances[i][j]) {
                        distances[i][j] = distances[i][k] + distances[k][j];
                    }
                }
            }
        }

        // Print the shortest distances
        printSolution(distances, vertices);
    }

    // Function to print the shortest distances
    private static void printSolution(int[][] distances, int vertices) {
        System.out.println("Shortest distances between all pairs of vertices:");
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                if (distances[i][j] == INF) {
                    System.out.print("INF\t");
                } else {
                    System.out.print(distances[i][j] + "\t");
                }
            }
            System.out.println();
        }
    }

    // Main method to test the implementation
    public static void main(String[] args) {
        int vertices = 4; // Number of vertices in the graph

        // Adjacency matrix representation of the graph
        int[][] graph = {
            {0, 5, INF, 10},  // 0 -> 0: 0, 0 -> 1: 5, 0 -> 2: INF, 0 -> 3: 10
            {INF, 0, 3, INF},  // 1 -> 0: INF, 1 -> 1: 0, 1 -> 2: 3, 1 -> 3: INF
            {INF, INF, 0, 1},  // 2 -> 0: INF, 2 -> 1: INF, 2 -> 2: 0, 2 -> 3: 1
            {INF, INF, INF, 0}  // 3 -> 0: INF, 3 -> 1: INF, 3 -> 2: INF, 3 -> 3: 0
        };

        // Run Floyd-Warshall Algorithm
        floydWarshall(graph, vertices);
    }
}
